openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  # Added by API Auto Mocking Plugin
  - description: Cal Engine (Dev)
    url: http://cal-engine-dev.choco-up.com:3000
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/kevguy/cal-engine/1.0.0
  - description: Development
    url: http://cal-engine-dev.choco-up.com:3000
  - description: UAT
    url: http://cal-engine-dev.choco-up.com:3000
  - description: Production
    url: http://cal-engine-dev.choco-up.com:3000
info:
  version: "1.0.0"
  title: Cal Engine API
  description: |
    This is an example of using OAuth2 Access Code Flow in a specification to
    describe security to your API.

    You can use the following command to retrieve the auth token:
    ```
    curl --location --request POST 'https://keycloak.dev.coherent.com.hk/auth/realms/coherent/protocol/openid-connect/token' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'client_id=epos' \
    --data-urlencode 'grant_type=password' \
    --data-urlencode 'username=kevin.lai@coherent.com.hk' \
    --data-urlencode 'password=Password!1234' | jq '.access_token'
    ```
security:
  - bearerAuth: []
#security:
#  - accessCode:
#      - read
#      - write
# 1)Define the key name and location

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # optional, for documentation purposes only
#  securitySchemes:
#    accessCode:
#      type: oauth2
#      flows:
#        authorizationCode:
#          authorizationUrl: 'http://example.com/oauth/auth'
#          tokenUrl: 'http://example.com/oauth/token'
#          scopes:
#            write: allows modifying resources
#            read: allows reading resources
  # securitySchemes:
  #   ApiKeyAuth:        # arbitrary name for the security scheme
  #     type: apiKey
  #     in: header       # can be "header", "query" or "cookie"
  #     name: x-api-key  # name of the header, query parameter or cookie
  # parameters:
  #   Language:
  #     in: query
  #     name: Language
  #     required: true
  #     schema:
  #       type: integer
  #       enum: [1, 2, 3]
  #       example: 1
  #     description: |
  #       Language:
  #         * 1 – English (default)
  #         * 2 – Traditional Chinese
  #         * 3 – Simplified Chinese
  schemas:
    FundingQuoteSuccessResponse:
      type: object
      properties:
        targeted_total_repayment:
          type: integer
          default: 0
        funding_amount_range:
          type: array
          items:
            type: integer
          default: [0, 0]
        payback_months:
          type: object
          properties:
            good:
              type: integer
              default: 0
            base:
              type: integer
              default: 0
            bad:
              type: integer
              default: 0
    RevenueRequirementSuccessResponse:
      type: object
      properties:
        required_total_repayment_range:
          type: array
          items:
            type: number
          default: [0, 0]
        required_fee_amount_range:
          type: array
          items:
            type: number
          default: [0, 0]
        required_revenue_percentages:
          type: object
          properties:
            good:
              type: array
              items:
                type: number
              default: [0, 0]
            base:
              type: array
              items:
                type: number
              default: [0, 0]
            bad:
              type: array
              items:
                type: number
              default: [0, 0]
    InternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: "Internal Server Error"
    FolderCreateSuccessResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
          default: null
        data:
          type: string
          nullable: true
          default: null
        errorCode:
          type: string
          nullable: true
          default: null
        status:
          type: string
          default: Success
    FolderCreateFolderExistsResponse:
      properties:
        Message:
          type: string
          nullable: true
          default: 'Error Occured. Api Endpoint: /docstore/api/v1/folders'
        Data:
          type: object
          properties:
            Error:
              type: object
              properties:
                data:
                  type: string
                  nullable: true
                  default: null
                status:
                  type: string
                  default: error
                path:
                  type: string
                  nullable: true
                  default: null
                errors:
                  type: array
                  items:
                    type: string
                  default: ['ENTITY_EXISTS_ALREADY']
            StatusCode:
              type: integer
              default: 400
            RequestUrl:
              type: string
              default: '/docstore/api/v1/folders'
            CorrelationId:
              type: string
              default: 62b4b909-3faa-4f9d-abec-e8a40271da60
        errorCode:
          type: string
          default: INTERNAL_SERVER_ERROR
        status:
          type: string
          default: Error
    SimpleMachineCommonPayload:
      type: object
      properties:
        RequestedServiceCategory:
          type: string
          default: func2
          required: true
          enum: [getCurrentState, getAvailableTransitions, queryTransitionIsAllowed]
        EngineType:
          type: string
          default: Type5
          required: true
        Inputs:
          type: object
          properties:
            data:
              type: object
              required: true
              properties:
                token:
                  type: string
                  required: true
                caseId:
                  type: string
                  required: true
    SimpleMachineActionPayload:
      type: object
      properties:
        RequestedServiceCategory:
          type: string
          default: func2
          required: true
          enum: [doAction]
        EngineType:
          type: string
          default: Type5
          required: true
        Inputs:
          type: object
          properties:
            action:
              type: string
              enum: [COPY_FORM, SIGN, SUBMITTING_FORM]
              required: true
              default: COPY_FORM
            data:
              type: object
              required: true
              properties:
                token:
                  type: string
                  required: true
                caseId:
                  type: string
                  required: true
    AddNumberPayload:
      type: object
      properties:
        RequestedServiceCategory:
          type: string
          default: func2
        EngineType:
          type: string
          default: Type5
        Inputs:
          type: object
          properties:
            first:
              type: integer
              default: 5000
            second:
              type: integer
              default: 10
    KeyCloakAuth:
      type: object
      properties:
        client_id:
          example: epos
          type: string
        grant_type:
          example: password
          type: string
        username:
          type: string
          example: kevin.lai@coherent.com.hk
        password:
          type: string
    KeyCloakSuccessResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ5Z09WRzJNVmdjMXN6ajB1eUJaNm8tTUZqV2dPNUI2RXBrQzZ6MWNBTTFRIn0.eyJleHAiOjE2MDk5MTI1OTYsImlhdCI6MTYwOTkwNTM5NiwianRpIjoiMjMxMDljZWUtNTg4Yi00NGZlLTgwMmItNjhmOTgzZTY4MDc3IiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuY29oZXJlbnQuY29tLmhrL2F1dGgvcmVhbG1zL2NvaGVyZW50IiwiYXVkIjoiZXBvcyIsInN1YiI6IjRmMTlkNmNlLTMxNGUtNDEyMS04YzIwLTcwNzE0NThhYWY3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImVwb3MiLCJzZXNzaW9uX3N0YXRlIjoiNDFmZDExYWQtYmJhYS00NTU5LWI1N2QtOTdlMTUyYzFhZDE1IiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXSwibmFtZSI6IktldmluIExhaSIsImdyb3VwcyI6WyJzdXBlcnZpc29yOmNvaGVyZW50LmZvcm1zIiwidXNlcjpjb2hlcmVudC5mb3JtcyIsInVzZXI6Y29oZXJlbnQucGYiLCJ1c2VyOnBmIl0sInJlYWxtIjoiY29oZXJlbnQiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJrZXZpbi5sYWkiLCJnaXZlbl9uYW1lIjoiS2V2aW4iLCJmYW1pbHlfbmFtZSI6IkxhaSIsImVtYWlsIjoia2V2aW4ubGFpQGNvaGVyZW50LmNvbS5oayJ9.gw7EV085GThjLrhhHevZx_Mti2qaNrQVfkFV_WW08bfh2WvIyE1w0Ttfu36fxwCVWBGoUgSekr1s9U_PlprfG5hV1cjhOTnkumUJyZ--VDSoJmkbglt6t1tnNixJ7WFNIE0soLIdySFo4orUETBcNFlzZ6pErT-ixJ5EA3M_C83pUPaUHkMyrzs8hnbtg1357XayMZJaGqZT1rHhPbsIXvbarYAAdyFBleCFVzeoW1G_zxuv5JxUmDfbfZ6ePMH3FULCLHcO_bgWUjZXJE7XNdgODiCxiJc0m6J-FwIPw8rc8kwwAHl7YALyEo285r_ZTn5S87aQLeMuZjxQhpgmoA
        expires_in:
          type: integer
          example: 7200
        refresh_expires_in:
          type: integer
          example: 21600
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI2MGQzMWE3OS04ZDgyLTRjMzMtODZkYy0wNDhkZmUyNGFkNDUifQ.eyJleHAiOjE2MDk5MjY5OTYsImlhdCI6MTYwOTkwNTM5NiwianRpIjoiZDEzNGE5NWUtNTViZC00MTE4LTkzMDEtYjU3ZDNjYzM3NGE3IiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuY29oZXJlbnQuY29tLmhrL2F1dGgvcmVhbG1zL2NvaGVyZW50IiwiYXVkIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuY29oZXJlbnQuY29tLmhrL2F1dGgvcmVhbG1zL2NvaGVyZW50Iiwic3ViIjoiNGYxOWQ2Y2UtMzE0ZS00MTIxLThjMjAtNzA3MTQ1OGFhZjdjIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImVwb3MiLCJzZXNzaW9uX3N0YXRlIjoiNDFmZDExYWQtYmJhYS00NTU5LWI1N2QtOTdlMTUyYzFhZDE1Iiwic2NvcGUiOiJlbWFpbCBwcm9maWxlIn0.QjS4xVWTF0VpBbfMJrrptzG2cz4e2OMxEukOBUIu-38
        token_type:
          type: string
          example: Bearer
        not-before-policy:
          type: integer
          example: 0
        session_state:
          type: string
          format: uuid
          example: 41fd11ad-bbaa-4559-b57d-97e152c1ad15,
        scope:
          type: string
          example: email profile
    BasicResponseModel:
      type: object
      properties:
        Code:
          type: integer
          format: int64
          example: 0
          description: >
            (Star)
            Code:
              * `0` - Success
              * `1` - Case Not Found
              * `2` - Action invalid
              * `3` - Action failed
        Message:
          type: string
          example: Success
          description: >-
            (Star) Description of success or error in calling the api function, refer to Code field
        # DateTime:
        #   type: integer
        #   format: yyyyMMddHHmmss
        #   example: 20180328001122
        #   description: (Star) Return Datetime in yyyyMMddHHmmss
        CaseID:
          type: string
          example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
          description: The Case ID
        # Data:
        #   type: object
        #   properties:
        #     Status:
        #       type: string
        #       example: Received By Agent
      required:
        - Code
        - Message
        - DateTime
    BasicErrorModel:
      type: object
      properties:
        Code:
          type: integer
          format: int64
          example: 0
          description: >
            (Star)
            Code:
              * `0` - Success
              * `1` - Case Not Found
              * `2` - Action invalid
              * `3` - Action failed
        Message:
          type: string
          example: Case not found
          description: >-
            (Star) Description of error in calling the api function, refer to Code field
    PaymentState:
      type: object
      properties:
        CaseID:
          type: string
          format: uuid
          example: "0fc86fe4-436c-4c83-b838-c4bff91ae2ea"
          description: The Case ID
        Amount:
          type: integer
          example: 5000
          description: Amount to be paid
        Currency:
          type: string
          example: USD
          description: Currency for the payment
        ExpirationImte:
          type: string
          example: "2020-10-14T09:52:21.858372Z"
          description: Date / time the payment expires in ISO-8601 format
        PaymentMethod:
          type: string
          enum:
            - cash
            - cheque
            - online
          example: cash
        PaymentTime:
          type: string
          example: "2020-10-14T09:52:21.858372Z"
          description: Date / time the payment is paid in ISO-8601 format
        AgentSubmitTime:
          type: string
          example: "2020-10-14T09:52:21.858372Z"
          description: Date / time the payment is submitted to Chubb by agent in ISO-8601 format
        ReceivedTime:
          type: string
          example: "2020-10-14T09:52:21.858372Z"
          description: Date / time the payment is received by Chubb in ISO-8601 format
        CBR-TR:
          type: string
          format: uuid
          example: "0fc86fe4-436c-4c83-b838-c4bff91ae2ea"
          description: The CBR and TR
  # define reusable parameters
  parameters:
    machineName:
      name: machineName
      in: path
      description: The name of your state machine
      required: true
      schema:
        type: string
        default: SimpleStateMachine
    documentId:
      name: documentId
      in: path
      description: The document ID of your state machine script
      required: true
      schema:
        type: string
        default: 7a59937b-e79a-4cab-ba29-bd5923107d9d

# 2) Apply the API key globally to all operations

paths:
  /v1/offer/funding_quote:
    parameters:
      - in: query
        name: monthly_revenue
        schema:
          type: integer
          default: 200000
        description: >-
          The monthly revenue of the company.
    get:
      security: []
      summary: Funding Quote
      description:
        This method is used to calculate the funding quote.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FundingQuoteSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /v1/offer/revenue_requirement:
    parameters:
      - in: query
        name: monthly_revenue
        schema:
          type: integer
          default: 200000
        description: >-
          The monthly revenue of the company.
    get:
      security: []
      summary: Revenue Requirement
      description:
        This method is used to calculate the revenue requirement.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/RevenueRequirementSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /api/filemanager/createfolder/Global/products/JSDemo/productfactory/engines/{machineName}:
    parameters:
      - $ref: '#components/parameters/machineName'
    post:
      summary: Create Folder
      description: >-
        This method is used to create a new folder on Product Factory.
      tags:
        - 'Deployment Step 1: Create Folder'
        - ProductFactory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateSuccessResponse'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateFolderExistsResponse'
  /api/filemanager/SaveDocument//products/JSDemo/productfactory/engines/{machineName}:
    parameters:
      - $ref: '#components/parameters/machineName'
    post:
      summary: Upload Script File
      description: >-
        This method is used to upload the script file to the folder of the same name on Product Factory.
        For example, if your script is named `SimpleStateMachine.js`,
        you have to upload the file to the folder of the name `SimpleStateMachine`.
      tags:
        - 'Deployment Step 2: Upload Script'
        - ProductFactory
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                privacyLevel:
                  type: string
                  default: Global
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateSuccessResponse'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateFolderExistsResponse'
#  /api/filemanager/GetDocumentByFilePath?filepath={machineName}:
  /api/filemanager/GetDocumentByFilePath?filepath=products%2FJSDemo%2Fproductfactory%2Fengines%2F{machineName}%2F{machineName}.js:
    # path is /products/JSDemo/productfactory/engines/{machineName}/{machineName}.js
    parameters:
      - $ref: '#components/parameters/machineName'
    get:
      summary: Query Business Events
      description: >-
        Description
      tags:
        - 'Deployment Step 3.1: Get Document ID'
        - ProductFactory
      responses:
        '200':
          description: OK
        '400':
  #  /api/filemanager/GetDocument/7a59937b-e79a-4cab-ba29-bd5923107d9d:
  /api/filemanager/GetDocument/{machineName}:
    parameters:
      - $ref: '#components/parameters/machineName'
    get:
      summary: Query Business Events
      description: >-
        Description
      tags:
        - ProductFactory
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request Error
#  /api/filemanager/UpdateDocument/7a59937b-e79a-4cab-ba29-bd5923107d9d
  /api/filemanager/UpdateDocument/{documentId}:
    parameters:
      - $ref: '#components/parameters/documentId'
    post:
      summary: Update metadata of a document
      description: >-
        This method is used to update the metadata of a document.
      tags:
        - ProductFactory
        - 'Deployment Step 3.2: Update Metadata'
      requestBody:
        content:
          application/json:
            schema:
              type: string
              default:
                {
                  "dataJson": { "apiUrl": "https://bi-events.dev.coherent.com.hk", "contentType": "application/json" }
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateSuccessResponse'
  /casestore/api/v1/cases:
    servers:
      - url: 'https://entitystore.{environment}.coherent.com.hk'
        variables:
          environment:
            enum:
              - dev
              - staging
            default: dev
    post:
      summary: Create a sample case
      description: >-
        Ths method is used to create a sample case to play with, and in turn the Case ID will be sent back as a response
      tags:
        - EntityStore
      requestBody:
        content:
          application/json:
            schema:
              type: string
              default:
                  {
                    path: '/for-state-machine',
                    email1: 'kevin.lai@coherent.com.hk',
                    status: 'OPENED',
                    status2: 'SINGLE',
                    email2: 'email2@x.com',
                    amount1: '10.1',
                    amount2: 15,
                    amount3: 12.1,
                    policyNumber: 'abc123',
                    name1: 'name1',
                    name2: 'name2',
                    otherString1: 'otherString1',
                    otherString2: 'otherString2',
                    referenceId: 'referenceId',
                    disposition: 'disposition',
                    productName: 'productName',
                    dataJson: {},
                  }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FolderCreateSuccessResponse'
  /api/v1/Product/JSDemo/engines/execute/{machineName}:
    servers:
      - url: https://excel.dev.coherent.com.hk
    parameters:
      - $ref: '#components/parameters/machineName'
    post:
      summary: Execute the sample State Machine
      description: >-
        This function is used to do the following things:
          - execute common methods
            - to get the current state of the case
            - to query the list of transitions the case can do
            - to query if the transition is allowed for the case of interest
          - do the transitions (COPY_FORM, SIGN, SUBMITTING_FORM)
      tags:
        - StateMachine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimpleMachineCommonPayload'
                - $ref: '#/components/schemas/SimpleMachineActionPayload'
            examples:
              get current state:
                value: {
                  "RequestedServiceCategory": "getCurrentState",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
#                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              get available transitions:
                value: {
                  "RequestedServiceCategory": "getAvailableTransitions",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
#                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              check if action is allowed:
                value: {
                  "RequestedServiceCategory": "queryTransitionIsAllowed",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
                      "transition": "COPY_FORM | SIGN | SUBMITTING_FORM",
#                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              do transition:
                value: {
                  "RequestedServiceCategory": "doAction",
                  "EngineType": "Type5",
                  "Inputs": {
                    "action": "COPY_FORM | SIGN | SUBMITTING_FORM",
                    "data": {
#                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              query business events:
                value: {
                  "RequestedServiceCategory": "queryBusinessEventLogEvents",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
#                      "token": "",
                      "id": ""
                    }
                  }
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/KeyCloakSuccessResponse'
  /api/v1/Product/JSDemo/engines/execute/AddNumbers:
    post:
      summary: Get Auth Token (dev)
      description: >-
        This function is used to retrieve the auth token
      tags:
        - StateMachine
#      parameters:
#        - in: header
#          name: FAuthorization
#          schema:
#            type: string
#            default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ5Z09WRzJNVmdjMXN6ajB1eUJaNm8tTUZqV2dPNUI2RXBrQzZ6MWNBTTFRIn0.eyJleHAiOjE2MDk5OTc5NTUsImlhdCI6MTYwOTk5MDc1NSwianRpIjoiMTQzZDg4NGMtYWI3NS00ZTVlLTliZWItZTVkNjFjZDg3MDdlIiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5kZXYuY29oZXJlbnQuY29tLmhrL2F1dGgvcmVhbG1zL2NvaGVyZW50IiwiYXVkIjoiZXBvcyIsInN1YiI6IjRmMTlkNmNlLTMxNGUtNDEyMS04YzIwLTcwNzE0NThhYWY3YyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImVwb3MiLCJzZXNzaW9uX3N0YXRlIjoiY2EzN2FiN2ItM2Y2Ny00NDVmLWJiNmMtMmUwZjcyNGU4MDBkIiwiYWNyIjoiMSIsInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXSwibmFtZSI6IktldmluIExhaSIsImdyb3VwcyI6WyJzdXBlcnZpc29yOmNvaGVyZW50LmZvcm1zIiwidXNlcjpjb2hlcmVudC5mb3JtcyIsInVzZXI6Y29oZXJlbnQucGYiLCJ1c2VyOnBmIl0sInJlYWxtIjoiY29oZXJlbnQiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJrZXZpbi5sYWkiLCJnaXZlbl9uYW1lIjoiS2V2aW4iLCJmYW1pbHlfbmFtZSI6IkxhaSIsImVtYWlsIjoia2V2aW4ubGFpQGNvaGVyZW50LmNvbS5oayJ9.FpRSEaFpOKght5i5uae1p59TAjmmVNXJtHHUM3UYgS6hw92BBvj52C7Rbv7xAk8c2qETbAkns92-H_lxO2ubWEos3AS_d7cUCBhvbUkoffH7o7S0An5zNsZFp0rgc7UJ8-EsdE08XGaXr6E5zxGF7qPWH6itqhYdrnlckJ7q4g7fvmwZ02ETcPLIQBGKWg7ggslBiJWuB5XOonjtxlufeHC5e9FTATjKrvudM1EZPZpbwczsWchteab6RxbIYrGVnJva8xGfFCEMzuzDs8_OPbWOFmjhAztELe77bPthduCg9pnF78H7ueX2gFjEW12unrBaklfCMNrZy7zDkzSwqA
#          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimpleMachineCommonPayload'
                - $ref: '#/components/schemas/SimpleMachineActionPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/KeyCloakSuccessResponse'
  /api/v1/search/businessevents:
  # /api/v1/search/businessevents?$top=10&$count=true&$filter=TextMessage eq 'demo create event Message' and UserName eq 'jigar'
    servers:
      - url: 'https://bi-events.{environment}.coherent.com.hk'
        variables:
          environment:
            enum:
              - dev
              - staging
            default: dev
    get:
      summary: Query Business Events
      description: >-
        This function is used to search for business events using [OData Query](https://help.nintex.com/en-us/insight/OData/HE_CON_ODATAQueryCheatSheet.htm)
      tags:
        - BusinessEvent
      parameters:
        - in: query
          name: $top
          schema:
            type: integer
          description: >-
            Allows to request the number of items in the queried collection to be included in the result.
        - in: query
          name: $count
          schema:
            type: boolean
          description: >-
            Allows clients to request a count of the matching resources included with the resources in the response.
        - in: query
          name: $select
          schema:
            type: string
          description: >-
            Allows clients to requests a specific set of properties for each entity or complex type.
          example: Tenant,UserName,EventData
        - in: query
          name: $filter
          schema:
            type: string
          description: >-
            The query option allows clients to filter a collection of resources that are addressed by a request URL with a filter expression.
          example: TextMessage eq 'demo create event Message' and UserName eq 'jigar'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/KeyCloakSuccessResponse'
  /api/v1/businessevents:
    servers:
      - url: 'https://bi-events.{environment}.coherent.com.hk'
        variables:
          environment:
            enum:
              - dev
              - staging
            default: dev
    post:
      summary: Create an Event
      description: >-
        This function is used to create a custom business event
      tags:
        - BusinessEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimpleMachineCommonPayload'
                - $ref: '#/components/schemas/SimpleMachineActionPayload'
            examples:
              sample event with dummy data:
                value: {
                  "EntityId": "7f09195b-c11d-45a0-8cdc-b2d07ffb04f6",
                  "EntityVersionId": null,
                  "EntityPath": "dummypath_0",
                  "UserId": "testUserID",
                  "UserName": "jigar",
                  "SystemName": "EventPush_0",
                  "EventType": "TestEvents_0",
                  "TimeStamp": "2020-10-21T07:14:33.5145028Z",
                  "Tenant": "coherent",
                  "Level": 2,
                  "CorrelationId": "42db13ad-3149-4584-a650-5d0497e4f837",
                  "EventData": {
                    "FirstName": "test_0"
                  },
                  "PIIData": false,
                  "SessionId": "SessionId 1",
                  "TextMessage": "demo create event Message",
                  "Sensitivity": 0
                }
              get available transitions:
                value: {
                  "RequestedServiceCategory": "getAvailableTransitions",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              check if action is allowed:
                value: {
                  "RequestedServiceCategory": "queryTransitionIsAllowed",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
                      "transition": "COPY_FORM | SIGN | SUBMITTING_FORM",
                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              do transition:
                value: {
                  "RequestedServiceCategory": "doAction",
                  "EngineType": "Type5",
                  "Inputs": {
                    "action": "COPY_FORM | SIGN | SUBMITTING_FORM",
                    "data": {
                      "token": "",
                      "caseId": ""
                    }
                  }
                }
              query business events:
                value: {
                  "RequestedServiceCategory": "queryBusinessEventLogEvents",
                  "EngineType": "Type5",
                  "Inputs": {
                    "data": {
                      "token": "",
                      "id": ""
                    }
                  }
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/KeyCloakSuccessResponse'
  /auth/realms/coherent/protocol/openid-connect/token:
    servers:
#      - url: https://cors-anywhere.herokuapp.com/https://keycloak.dev.coherent.com.hk
      - url: https://keycloak.dev.coherent.com.hk
    post:
      summary: Get Auth Token (dev)
      description: >-
        This function is used to retrieve the auth token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyCloakAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/KeyCloakSuccessResponse'
#      parameters:
#        - in: path
#          name: id   # Note the name is the same as in the path
#          required: true
#          schema:
#            type: string
#            example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
#            minimum: 1
#          description: The case ID
  /cases/{id}/payment-statu:
    get:
      summary: Get Payment StatE
      description: >-
        This function is used to retrieve the payment status of a case
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
            minimum: 1
          description: The case ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponseModel'
                  - type: object
                    properties:
                      Data:
                        $ref: '#/components/schemas/PaymentState'
                    required:
                      - Code
                      - Message
        '400':
          description: Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicErrorModel'
                  - required:
                      - Code
                      - Message
  /cases/{id}/payment-actions/cancel:
    patch:
      summary: Cancel Payment
      description: >-
        This function is used to cancel a payment that has not been received by an agent or Chubb
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
            minimum: 1
          description: The case ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponseModel'
                  - type: object
                    properties:
                      Data:
                        $ref: '#/components/schemas/PaymentState'
                    required:
                      - Code
                      - Message
        '400':
          description: Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicErrorModel'
                  - required:
                      - Code
                      - Message
  /cases/{id}/payment-actions/agent-pay:
    patch:
      summary: Agent Payment for Chubb
      description: >-
        This function is used for agent submitting the payment they have from customers to Chubb
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
            minimum: 1
          description: The case ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponseModel'
                  - type: object
                    properties:
                      Data:
                        $ref: '#/components/schemas/PaymentState'
                    required:
                      - Code
                      - Message
        '400':
          description: Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicErrorModel'
                  - required:
                      - Code
                      - Message
  /cases/{id}/payment-actions/customer-pay:
    patch:
      summary: Customer Payment
      description: >-
        This function is used for agent submitting the payment they have from customers to Chubb
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            example: 0fc86fe4-436c-4c83-b838-c4bff91ae2ea
            minimum: 1
          description: The case ID
        - in: query
          name: method
          schema:
            type: string
            enum:
              - online
              - cash
              - cheque
          required: true
          description: |
            When submitting online, ...
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponseModel'
                  - type: object
                    properties:
                      Data:
                        $ref: '#/components/schemas/PaymentState'
                    required:
                      - Code
                      - Message
        '400':
          description: Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicErrorModel'
                  - required:
                      - Code
                      - Message


