openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/kevguy/cal-engine/1.0.0'
  - description: Development
    url: 'https://cal-engine-dev.choco-up.com'
  - description: UAT
    url: 'https://cal-engine-uat.choco-up.com'
  - description: Production
    url: 'https://cal-engine.choco-up.com'
info:
  version: 1.0.0
  title: Cal Engine API
  description: |
    Kevin: Please ignore this, the yaml sounds useful so I'm too lazy to delete it...... for now.

    This is an example of using OAuth2 Access Code Flow in a specification to
    describe security to your API.

    You can use the following command to retrieve the auth token:
    ```
    curl --location --request POST 'https://keycloak.dev.coherent.com.hk/auth/realms/coherent/protocol/openid-connect/token' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'client_id=epos' \
    --data-urlencode 'grant_type=password' \
    --data-urlencode 'username=kevin.lai@coherent.com.hk' \
    --data-urlencode 'password=Password!1234' | jq '.access_token'
    ```
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    FundingQuoteSuccessResponse:
      type: object
      properties:
        targeted_total_repayment:
          type: integer
          default: 273000
        funding_amount_range:
          type: array
          items:
            type: integer
          default:
            - 252777
            - 237391
        payback_months:
          type: object
          properties:
            good:
              type: integer
              default: 7
            base:
              type: integer
              default: 9
            bad:
              type: integer
              default: 13
    RevenueRequirementSuccessResponse:
      type: object
      properties:
        required_total_repayment_range:
          type: array
          items:
            type: number
          default:
            - 10800
            - 11500
        required_fee_amount_range:
          type: array
          items:
            type: number
          default:
            - 800
            - 1500
        required_revenue_percentages:
          type: object
          properties:
            good:
              type: array
              items:
                type: number
              default:
                - 0.0059
                - 0.0063
            base:
              type: array
              items:
                type: number
              default:
                - 0.006
                - 0.0064
            bad:
              type: array
              items:
                type: number
              default:
                - 0.0059
                - 0.0063
    BlockRewardData:
      type: object
      description: Rewards fields relating to rewards,
      properties:
        fuck:
          example: me
    BlockUpgradeStateData:
      type: object
      required:
        - current-protocol
      description: UpgradeState fields relating to a protocol upgrade.
      properties:
        current-protocol:
          type: string
          description: CurrentProtocol (proto) The current protocol version.
          example: https://github.com/algorandfoundation/specs/tree/bc36005dbd776e6d1eaf0c560619bb183215645c
        next-protocol:
          type: string
          description: NextProtocol (nextproto) The next proposed protocol version.
        next-protocol-approvals:
          type: number
          description: NextProtocolApprovals (nextyes) Number of blocks which approved the protocol upgrade.
        next-protocol-switch-on:
          type: string
          description: NextProtocolSwitchOn (nextswitch) Round on which the protocol upgrade will take effect.
        next-protocol-vote-before:
          type: string
          description: NextProtocolVoteBefore (nextbefore) Deadline round for this protocol upgrade (No votes will be consider after this round).
    BlockUpgradeVoteData:
      type: object
      description: UpgradeVote fields relating to voting for a protocol upgrade.
      properties:
        upgrade-approve:
          type: string
          description: UpgradeApprove (upgradeyes) Indicates a yes vote for the current proposal.
        upgrade-delay:
          type: string
          description: UpgradeDelay (upgradedelay) Indicates the time between acceptance and execution.
        upgrade-propose:
          type: string
          description: UpgradePropose (upgradeprop) Indicates a proposed upgrade.
    TransactionData:
      type: object
      description: Rewards fields relating to rewards,
      properties:
        fuck:
          example: me
    BlockData:
      type: object
      required:
        - genesis-hash
        - genesis-id
        - previous-block-hash
        - round
        - seed
        - timestamp
        - transactions-root
      properties:
        genesis-hash:
          type: string
          description: Genesis Hash (gh) hash to which this block belongs.
          example: wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=
        genesis-id:
          type: string
          description: Genesis ID (gen) ID to which this block belongs.
          example: mainnet-v1.0
        previous-block-hash:
          type: string
          description: PreviousBlockHash (prev) Previous block hash.
          example: "0oYrEQ4T+jOyxt9PYEQxEUxp43WoyATVVmNb6oNj4PI="
        rewards:
          allOf:
            - $ref: "#/components/schemas/BlockRewardData"
        round:
          type: number
          description: Round (rnd) Current round on which this block was appended to the chain.
          example: Rewards fields relating to rewards,
        seed:
          type: string
          description: Seed (seed) Sortition seed.
          example: "Sj2taoRT+OlDTodNjXdodPK78WXSl4dfkNWxUzoqxDQ="
        timestamp:
          type: number
          description: Timestamp (ts) Block creation timestamp in seconds since eposh.
          example: 1637481021
        transactions:
          description: Transactions (txns) list of transactions corresponding to a given round.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/TransactionData"
        transactions-root:
          description: >-
            TransactionsRoot (txn) TransactionsRoot authenticates the set of transactions
            appearing in the block. More specifically, it's the root of a merkle tree whose
            aves are the block's Txids, in lexicographic order. For the empty block, it's
             Note that the TxnRoot does not authenticate the signatures on the
            ansactions, only the transactions themselves. Two blocks with the same
            ansactions but in a different order and with different signatures will have
            e same TxnRoot.
          type: string
          example: "jIBcMlQTfzzzMgMJofPPZS4qhV1Q3Z0ya5rELCACcCA"
        txn-counter:
          description: >-
            TxnCounter (tc) TxnCounter counts the number of transactions committed in the
            ledger, from the time at which support for this feature was introduced.
            Specifically, TxnCounter is the number of the next transaction that will be
            committed after this block. It is 0 when no transactions have ever been
            committed (since TxnCounter started being supported).
          example: 434008110
        upgrade-state:
          description: Hihi
          allOf:
            - $ref: "#/components/schemas/BlockUpgradeStateData"
        upgrade-vote:
          description: Hihi
          allOf:
            - $ref: "#/components/schemas/BlockUpgradeVoteData"
        proposer:
          type: string
          description: Proposer
          example: W2TVRKTHYB7HDVUGI6E6AVAXDGFT3RJT3XZGB2TVOT53TAISPBO2F5R3HE
        block-hash:
          type: string
          description: Block hash
          example: GNTA9izDj+OBtvedLqJb730/U/qW3q8DdrNkGEZtldo=
    InternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: Internal Server Error
    HealthCheckOkResponse:
      type: object
      properties:
        status:
          type: string
          default: ok
        build:
          type: string
          default: a123456
    HealthCheckInternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: db not ready

paths:
  /debug/readiness:
    get:
      security: []
      summary: Health Check
      description: This method is used to check if server working normally.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckOkResponse'
              examples:
                EverythingOK:
                  description: Everything is working normally
                  value: { "status": "ok", "build": "123456" }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckInternalServerErrorResponse'
              examples:
                DbCheckFail:
                  description: Server fails to connect to database.
                  value: { "error": "db not ready" }
                DbCacheCheckFail:
                  description: Server fails to connect to database cache.
                  value: { "error": "db cache not ready" }
  /v1/algod/current-round:
    get:
      security: []
      summary: Get Current Round from Algod API
      description: Retrieves the current round data from Algod API
      tags:
        - Algod
        - Round
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FundingQuoteSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /v1/offer/funding_quote:
    parameters:
      - in: query
        name: monthly_revenue
        required: true
        schema:
          type: integer
          default: 200000
        description: The monthly revenue of the company.
    get:
      security: []
      summary: Funding Quote
      description: This method is used to calculate the funding quote.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FundingQuoteSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /v1/offer/revenue_requirement:
    parameters:
      - in: query
        name: monthly_revenue
        required: true
        schema:
          type: integer
          default: 200000
        description: The monthly revenue of the company.
      - in: query
        name: requested_funding_amount
        required: true
        schema:
          type: integer
          default: 10000
        description: The requested funding amount from the company.
    get:
      security: []
      summary: Revenue Requirement
      description: This method is used to calculate the revenue requirement.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/RevenueRequirementSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
