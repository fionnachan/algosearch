openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/kevguy/cal-engine/1.0.0'
  - description: Development
    url: 'https://cal-engine-dev.choco-up.com'
  - description: UAT
    url: 'https://cal-engine-uat.choco-up.com'
  - description: Production
    url: 'https://cal-engine.choco-up.com'
info:
  version: 1.0.0
  title: Cal Engine API
  description: |
    Kevin: Please ignore this, the yaml sounds useful so I'm too lazy to delete it...... for now.

    This is an example of using OAuth2 Access Code Flow in a specification to
    describe security to your API.

    You can use the following command to retrieve the auth token:
    ```
    curl --location --request POST 'https://keycloak.dev.coherent.com.hk/auth/realms/coherent/protocol/openid-connect/token' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'client_id=epos' \
    --data-urlencode 'grant_type=password' \
    --data-urlencode 'username=kevin.lai@coherent.com.hk' \
    --data-urlencode 'password=Password!1234' | jq '.access_token'
    ```
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    FundingQuoteSuccessResponse:
      type: object
      properties:
        targeted_total_repayment:
          type: integer
          default: 273000
        funding_amount_range:
          type: array
          items:
            type: integer
          default:
            - 252777
            - 237391
        payback_months:
          type: object
          properties:
            good:
              type: integer
              default: 7
            base:
              type: integer
              default: 9
            bad:
              type: integer
              default: 13
    RevenueRequirementSuccessResponse:
      type: object
      properties:
        required_total_repayment_range:
          type: array
          items:
            type: number
          default:
            - 10800
            - 11500
        required_fee_amount_range:
          type: array
          items:
            type: number
          default:
            - 800
            - 1500
        required_revenue_percentages:
          type: object
          properties:
            good:
              type: array
              items:
                type: number
              default:
                - 0.0059
                - 0.0063
            base:
              type: array
              items:
                type: number
              default:
                - 0.006
                - 0.0064
            bad:
              type: array
              items:
                type: number
              default:
                - 0.0059
                - 0.0063
    EvalDeltaKeyValue:
      type: object
      description: EvalDeltaKeyValue key-value pairs for StateDelta.
      required:
        - key
        - value
      properties:
        key:
          type: string
          description: Key
          example: R0E
        value:
          description: Value represents a TEAL value delta.
          allOf:
            - $ref: "#/components/schemas/EvalDelta"
    EvalDelta:
      type: object
      required:
        - action
      properties:
        action:
          type: number
          example: 2
        bytes:
          type: string
        uint:
          type: number
          example: 10449075514872
    TransactionKeyReg:
      type: object
      description: TransactionKeyreg fields for a keyreg transaction.
      properties:
        non-participation:
          type: boolean
          description: NonParticipation (nonpart) Mark the account as participating or non-participating.
        selection-participation-key:
          type: string
          description: SelectionParticipationKey (selkey) Public key used with the Verified Random Function (VRF) result during committee selection.
        vote-first-valid:
          type: number
          description: VoteFirstValid (votefst) First round this participation key is valid.
        vote-key-diluation:
          type: number
          description: VoteKeyDilution (votekd) Number of subkeys in each batch of participation keys.
        vote-last-valid:
          type: number
          description: VoteLastValid (votelst) Last round this participation key is valid.
        vote-participation-key:
          type: string
          description: VoteParticipationKey (votekey) Participation public key used in key registration transactions.
    AccountStateDelta:
      type: object
      description: AccountStateDelta application state delta.
      required:
        - address
        - delta
      properties:
        address:
          type: string
          example: MACYLFKZ7U3A6VRYICAFOL65P6DEYP73RQSTNMPUGO357MFEORQMWJPOYU
        delta:
          description: Delta application state delta.
          allOf:
            - $ref: "#/components/schemas/EvalDeltaKeyValue"
          example:
            {
              key: "VUE",
              value: {
                action: 2,
                uint: 29838007476
              }
            }
    TransactionPayment:
      type: object
      required:
        - amount
        - receiver
      description: TransactionPayment fields for a payment transaction.
      properties:
        amount:
          type: number
          description: Amount (amt) number of MicroAlgos intended to be transferred.
          example: 0
        close-amount:
          type: number
          description: CloseAmount number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.
        close-remainder-to:
          type: string
          description: CloseRemainderTo (close) when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.
        receiver:
          type: string
          description: Receiver (rcv) receiver's address.
    TransactionSignature:
      type: object
      description: >-
        TransactionSignature validation signature associated with some data. Only one of
        the signatures should be provided.
      properties:
        logicsig:
          description: Logicsig (lsig) Programatic transaction signature.
          allOf:
            - $ref: "#/components/schemas/TransactionSignatureLogicsig"
        multisig:
          description: Multisig (msig) structure holding multiple subsignatures.
          allOf:
            - $ref: "#/components/schemas/TransactionSignatureMultisig"
        sig:
          type: string
          description: Sig (sig) Standard ed25519 signature.
          example: k9mbQn6ILPU25eZv5gNKMyHB9zcwbOVRz4gtFepNLjaLtoX07kLc2iMy1ILIsiD0pxSWq7hf6dcBbKEMs6vsCw
    TransactionSignatureLogicsig:
      type: object
      description: TransactionSignatureLogicsig (lsig) Programatic transaction signature.
      properties:
        args:
          type: array
          description: Args (arg) Logic arguments, base64 encoded.
          items:
            type: string
        logic:
          type: string
          nullable: true
          description: >-
            Logic (l) Program signed by a signature or multi signature, or hashed to be the
            address of ana ccount. Base64 encoded TEAL program.
        multisig-signature:
          description: MultisigSignature (msig) structure holding multiple subsignatures.
          allOf:
            - $ref: "#/components/schemas/TransactionSignatureMultisig"
        signature:
          description: Signature (sig) ed25519 signature.
          type: string
    TransactionSignatureMultisig:
      type: object
      description: TransactionSignatureMultisig (msig) structure holding multiple subsignatures.
      properties:
        subsignature:
          description: Subsignature (subsig) holds pairs of public key and signatures.
          allOf:
            - $ref: "#/components/schemas/TransactionSignatureMultisigSubsignature"
        threshold:
          type: number
          description: Threshold (thr)
        version:
          type: number
          description: Version (v)
    TransactionSignatureMultisigSubsignature:
      type: object
      description: TransactionSignatureMultisigSubsignature defines a model for TransactionSignatureMultisigSubsignature.
      properties:
        public-key:
          type: string
          description: PublicKey (pk)
        signature:
          type: string
          description: Signature (s)
    BlockRewardData:
      type: object
      description: Rewards fields relating to rewards,
      required:
        - fee-sink
        - rewards-calculation-round
        - rewards-level
        - rewards-pool
        - rewards-rate
        - rewards-residue
      properties:
        fee-sink:
          type: string
          description: FeeSink (fees) accepts transaction fees, it can only spend to the incentive pool.
          example: Y76M3MSY6DKBRHBL7C3NNDXGS5IIMQVQVUAB6MP4XEMMGVF2QWNPL226CA
        rewards-calculation-round:
          type: number
          description: RewardsCalculationRound (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate MicroAlgos for every reward unit in the next round.
          example: 18000000
        rewards-level:
          type: number
          description: RewardsLevel (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis.
          example: 212242
        rewards-pool:
          type: string
          description: RewardsPool (rwd) accepts periodic injections from the fee-sink and continually redistributes them as rewards.
          example: "737777777777777777777777777777777777777777777777777UFEJ2CI"
        rewards-rate:
          type: string
          description: RewardsRate (rate) Number of new MicroAlgos added to the participation stake from rewards at the next round.
          example: 43700000
        rewards-residue:
          type: number
          description: RewardsResidue (frac) Number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
          example: 1505187333
    BlockUpgradeStateData:
      type: object
      required:
        - current-protocol
      description: UpgradeState fields relating to a protocol upgrade.
      properties:
        current-protocol:
          type: string
          description: CurrentProtocol (proto) The current protocol version.
          example: https://github.com/algorandfoundation/specs/tree/bc36005dbd776e6d1eaf0c560619bb183215645c
        next-protocol:
          type: string
          description: NextProtocol (nextproto) The next proposed protocol version.
        next-protocol-approvals:
          type: number
          description: NextProtocolApprovals (nextyes) Number of blocks which approved the protocol upgrade.
        next-protocol-switch-on:
          type: string
          description: NextProtocolSwitchOn (nextswitch) Round on which the protocol upgrade will take effect.
        next-protocol-vote-before:
          type: string
          description: NextProtocolVoteBefore (nextbefore) Deadline round for this protocol upgrade (No votes will be consider after this round).
    BlockUpgradeVoteData:
      type: object
      description: UpgradeVote fields relating to voting for a protocol upgrade.
      properties:
        upgrade-approve:
          type: string
          description: UpgradeApprove (upgradeyes) Indicates a yes vote for the current proposal.
        upgrade-delay:
          type: string
          description: UpgradeDelay (upgradedelay) Indicates the time between acceptance and execution.
        upgrade-propose:
          type: string
          description: UpgradePropose (upgradeprop) Indicates a proposed upgrade.
    TransactionData:
      type: object
      description: Rewards fields relating to rewards,
      properties:
        auth-addr:
          type: string
          description: AuthAddr (sgnr) this is included with signed transactions when the signing address does not equal the sender. The backend can use this to ensure that auth addr is equal to the accounts auth addr.
          example: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
        close-rewards:
          type: number
          description: CloseRewards (rc) rewards applied to close-remainder-to account.
        closing-amount:
          type: number
          description: ClosingAmount (ca) closing amount for transaction.
        confirmed-round:
          type: number
          description: ConfirmedRound round when the transaction was confirmed.
          example: 17559915
        created-application-index:
          type: number
          description: CreatedApplicationIndex specifies an application index (ID) if an application was created with this transaction.
        created-asset-index:
          type: number
          description: CreatedAssetIndex specifies an asset index (ID) if an asset was created with this transaction.
        fee:
          type: number
          description: Fee (fee) Transaction fee.
          example: 1000
        first-valid:
          type: number
          description: FirstValid (fv) First valid round for this transaction.
          example: 17559910
        genesis-hash:
          type: string
          description: GenesisHash (gh) Hash of genesis block.
          example: wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8
        genesis-id:
          type: string
          description: GenesisId (gen) genesis block ID.
          example: mainnet-v1.0
        global-state-delta:
          description: GlobalStateDelta (gd) Global state key/value changes for the application being executed by this transaction.
          allOf:
            - $ref: "#/components/schemas/EvalDeltaKeyValue"
        group:
          description: >-
            Group (grp) Base64 encoded byte array of a sha512/256 digest. When present
            indicates that this transaction is part of a transaction group and the value is
            the sha512/256 hash of the transactions in that group.
          type: string
          example: iRqKnMRI6CqEM650P8JeEjMMKKK833jOjetBFDGVna0
        id:
          type: string
          description: transaction ID
          example: T6IYXFQTZ7SMVEH5N5KYH5OSRW5XQRUZ4T7FX6TBDQ5HKNIAKQNA
        intra-round-offset:
          type: number
          description: IntraRoundOffset offset into the round where this transaction was confirmed.
        keyreg-transaction:
          description: KeyregTransaction fields for a keyreg transaction.
          allOf:
            - $ref: "#/components/schemas/TransactionKeyReg"
        last-valid:
          type: number
          description: LastValid (lv) Last valid round for this transaction.
          example: 17560910
        lease:
          type: string
          description: >-
            Lease (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of
            transactions. If this field is nonzero, then once the transaction is confirmed,
            it acquires the lease identified by the (Sender, Lease) pair of the transaction
            until the LastValid round passes. While this transaction possesses the lease, no
            other transaction specifying this lease can be confirmed.
          example: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        local-state-delta:
          description: LocalStateDelta (ld) Local state key/value changes for the application being executed by this transaction.
          allOf:
            - $ref: "#/components/schemas/AccountStateDelta"
        note:
          type: string
          description: Note (note) Free form data.
        payment-transaction:
          description: PaymentTransaction fields for a payment transaction.
          allOf:
            - $ref: "#/components/schemas/TransactionPayment"
        rekey-to:
          type: string
          description: >-
            RekeyTo (rekey) when included in a valid transaction, the accounts auth addr
            will be updated with this value and future signatures must be signed with the
            key represented by this address.
          example: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ
        round-time:
          type: number
          description: RoundTime time when the block this transaction is in was confirmed.
          example: 1637481021
        sender:
          type: string
          description: Sender (snd) Sender's address.
          example: MACYLFKZ7U3A6VRYICAFOL65P6DEYP73RQSTNMPUGO357MFEORQMWJPOYU
        sender-rewards:
          type: number
          description: >-
            Signature validation signature associated with some data. Only one of the
            signatures should be provided.
        signature:


    BlockData:
      type: object
      required:
        - genesis-hash
        - genesis-id
        - previous-block-hash
        - round
        - seed
        - timestamp
        - transactions-root
      properties:
        genesis-hash:
          type: string
          description: Genesis Hash (gh) hash to which this block belongs.
          example: wGHE2Pwdvd7S12BL5FaOP20EGYesN73ktiC1qzkkit8=
        genesis-id:
          type: string
          description: Genesis ID (gen) ID to which this block belongs.
          example: mainnet-v1.0
        previous-block-hash:
          type: string
          description: PreviousBlockHash (prev) Previous block hash.
          example: "0oYrEQ4T+jOyxt9PYEQxEUxp43WoyATVVmNb6oNj4PI="
        rewards:
          allOf:
            - $ref: "#/components/schemas/BlockRewardData"
        round:
          type: number
          description: Round (rnd) Current round on which this block was appended to the chain.
          example: Rewards fields relating to rewards,
        seed:
          type: string
          description: Seed (seed) Sortition seed.
          example: "Sj2taoRT+OlDTodNjXdodPK78WXSl4dfkNWxUzoqxDQ="
        timestamp:
          type: number
          description: Timestamp (ts) Block creation timestamp in seconds since eposh.
          example: 1637481021
        transactions:
          description: Transactions (txns) list of transactions corresponding to a given round.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/TransactionData"
        transactions-root:
          description: >-
            TransactionsRoot (txn) TransactionsRoot authenticates the set of transactions
            appearing in the block. More specifically, it's the root of a merkle tree whose
            aves are the block's Txids, in lexicographic order. For the empty block, it's
             Note that the TxnRoot does not authenticate the signatures on the
            ansactions, only the transactions themselves. Two blocks with the same
            ansactions but in a different order and with different signatures will have
            e same TxnRoot.
          type: string
          example: "jIBcMlQTfzzzMgMJofPPZS4qhV1Q3Z0ya5rELCACcCA"
        txn-counter:
          description: >-
            TxnCounter (tc) TxnCounter counts the number of transactions committed in the
            ledger, from the time at which support for this feature was introduced.
            Specifically, TxnCounter is the number of the next transaction that will be
            committed after this block. It is 0 when no transactions have ever been
            committed (since TxnCounter started being supported).
          example: 434008110
        upgrade-state:
          description: Hihi
          allOf:
            - $ref: "#/components/schemas/BlockUpgradeStateData"
        upgrade-vote:
          description: Hihi
          allOf:
            - $ref: "#/components/schemas/BlockUpgradeVoteData"
        proposer:
          type: string
          description: Proposer
          example: W2TVRKTHYB7HDVUGI6E6AVAXDGFT3RJT3XZGB2TVOT53TAISPBO2F5R3HE
        block-hash:
          type: string
          description: Block hash
          example: GNTA9izDj+OBtvedLqJb730/U/qW3q8DdrNkGEZtldo=
    InternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: Internal Server Error
    HealthCheckOkResponse:
      type: object
      properties:
        status:
          type: string
          default: ok
        build:
          type: string
          default: a123456
    HealthCheckInternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: db not ready

paths:
  /debug/readiness:
    get:
      security: []
      summary: Health Check
      description: This method is used to check if server working normally.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckOkResponse'
              examples:
                EverythingOK:
                  description: Everything is working normally
                  value: { "status": "ok", "build": "123456" }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckInternalServerErrorResponse'
              examples:
                DbCheckFail:
                  description: Server fails to connect to database.
                  value: { "error": "db not ready" }
                DbCacheCheckFail:
                  description: Server fails to connect to database cache.
                  value: { "error": "db cache not ready" }
  /v1/algod/current-round:
    get:
      security: []
      summary: Get Current Round from Algod API
      description: Retrieves the current round data from Algod API
      tags:
        - Algod
        - Round
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FundingQuoteSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /v1/offer/funding_quote:
    parameters:
      - in: query
        name: monthly_revenue
        required: true
        schema:
          type: integer
          default: 200000
        description: The monthly revenue of the company.
    get:
      security: []
      summary: Funding Quote
      description: This method is used to calculate the funding quote.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/FundingQuoteSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
  /v1/offer/revenue_requirement:
    parameters:
      - in: query
        name: monthly_revenue
        required: true
        schema:
          type: integer
          default: 200000
        description: The monthly revenue of the company.
      - in: query
        name: requested_funding_amount
        required: true
        schema:
          type: integer
          default: 10000
        description: The requested funding amount from the company.
    get:
      security: []
      summary: Revenue Requirement
      description: This method is used to calculate the revenue requirement.
      tags:
        - Offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/RevenueRequirementSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
