openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/kevguy/shopify-integration/1.0.0'
  - description: Development
    url: 'https://wc-integration-dev.choco-up.com'
  - description: UAT
    url: 'https://wc-integration-uat.choco-up.com'
  - description: Production
    url: 'https://wc-integration.choco-up.com'
info:
  version: 1.0.0
  title: WooCommerce Integration Service API
  description: |
    Kevin: Please ignore this, the yaml sounds useful so I'm too lazy to delete it...... for now.

    This is an example of using OAuth2 Access Code Flow in a specification to
    describe security to your API.

    You can use the following command to retrieve the auth token:
    ```
    curl --location --request POST 'https://keycloak.dev.coherent.com.hk/auth/realms/coherent/protocol/openid-connect/token' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'client_id=epos' \
    --data-urlencode 'grant_type=password' \
    --data-urlencode 'username=kevin.lai@coherent.com.hk' \
    --data-urlencode 'password=Password!1234' | jq '.access_token'
    ```
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    InternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: Internal Server Error
    BadRequestErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: Bad Request Error
    HealthCheckOkResponse:
      type: object
      properties:
        status:
          type: string
          default: ok
        build:
          type: string
          default: a123456
    HealthCheckInternalServerErrorResponse:
      type: object
      properties:
        error:
          type: string
          default: db not ready


paths:
  /debug/readiness:
    get:
      security: []
      summary: Health Check
      description: This method is used to check if server working normally.
      tags:
        - Common
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckOkResponse'
              examples:
                EverythingOK:
                  description: Everything is working normally
                  value: { "status": "ok", "build": "123456" }
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/HealthCheckInternalServerErrorResponse'
              examples:
                DbCheckFail:
                  description: Server fails to connect to database.
                  value: { "error": "db not ready" }
                DbCacheCheckFail:
                  description: Server fails to connect to database cache.
                  value: { "error": "db cache not ready" }
  /v1/worker/jobs:
    get:
      security: [ ]
      summary: Ongoing Jobs
      description: This method is used for users to see ongoing integration jobs that are running on this service
      tags:
        - Common
      responses:
        '200':
          description: The list of job keys that represent the jobs that are ongoing.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                List:
                  description: An example list of keys
                  value: ["123", "234", "345"]
  /v1/worker/stop-job:
    parameters:
      - in: query
        name: key
        required: true
        schema:
          type: string
        description: The job key to be cancelled.
    post:
      security: [ ]
      summary: Stop Job
      description: This method is used for cancelling an ongoing job.
      tags:
        - Common
      responses:
        '200':
          description: The list of job keys that represent the jobs that are ongoing.
  /v1/auth:
    get:
      security: []
      summary: Retrieve WooCommerce Redirect URL
      description: This method is used for our service to generate an installation link for user to authenticate with their WooCommerce credentials. Since Swagger doesn't allow GET requests to have a request body, so please supply a json with `store_url` (e.g. https://example.com) and `company_id` as the payload.
      tags:
        - WooCommerce
      responses:
        '301':
          description: The redirect url which returns client back to the application page.
          headers:
            Location:
              schema:
                type: string
                format: uri
              examples:
                301SuccessInstallation:
                  description: Redirect URI if installation is successful.
                  value: 'https://example.com/wc-auth/v1/authorize?app_name=Choco+Up&yser_id=123456&scope=read&return_url=...&callback_url=...'
        '400':
          description: Bad Request. Very possibly there are missing properties in the request body.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestErrorResponse'
              examples:
                HmacCheckFail:
                  description: Request fails to pass HMAC check.
                  value: { "message": "unable to unmarshal data, make sure company_id and store_url are present" }
    post:
      security: []
      summary: WooCommerce Callback URL
      description: This method is used for WooCommerce to return credentials to our service.
      tags:
        - WooCommerce
      parameters:
        - in: query
          name: store_url
          required: true
          schema:
            type: string
          description: The Store URL
      requestBody:
        description: The credentials WooCommerce sends to our service
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key_id:
                  type: string
                  default: "some random string"
                user_id:
                  type: string
                  default: "the company id"
                consumer_key:
                  type: string
                  default: "some random string that is important"
                consumer_secret:
                  type: string
                  default: "some random string that is important"
                key_permissions:
                  type: string
                  default: "read"
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request. Very possibly there are missing properties in the request body.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BadRequestErrorResponse'
              examples:
                HmacCheckFail:
                  description: Request fails to pass HMAC check.
                  value: { "message": "unable to unmarshal data, ..." }
      x-codeSamples:
        - lang: 'cURL'
          source: |
            curl --location --request GET 'https://wc-integration-uat.choco-up.com/v1/start-integration/7bc4ea37-2423-49b6-ba3a-07720260cda3?store_url=https://car-learning.com'
        - lang: 'JavaScript'
          source: |
            var requestOptions = {
              method: 'GET',
              redirect: 'follow'
            };

            fetch("https://wc-integration-uat.choco-up.com/v1/start-integration/7bc4ea37-2423-49b6-ba3a-07720260cda3?store_url=https://car-learning.com", requestOptions)
              .then(response => response.text())
              .then(result => console.log(result))
              .catch(error => console.log('error', error));
        - lang: 'Go'
          source: |
            package main

            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )

            func main() {

              url := "https://wc-integration-uat.choco-up.com/v1/start-integration/7bc4ea37-2423-49b6-ba3a-07720260cda3?store_url=https://car-learning.com"
              method := "GET"

              client := &http.Client {
              }
              req, err := http.NewRequest(method, url, nil)

              if err != nil {
                fmt.Println(err)
                return
              }
              res, err := client.Do(req)
              if err != nil {
                fmt.Println(err)
                return
              }
              defer res.Body.Close()

              body, err := ioutil.ReadAll(res.Body)
              if err != nil {
                fmt.Println(err)
                return
              }
              fmt.Println(string(body))
            }
        - lang: 'Python'
          source: |
            import http.client

            conn = http.client.HTTPSConnection("wc-integration-uat.choco-up.com")
            payload = ''
            headers = {}
            conn.request("GET", "/v1/start-integration/7bc4ea37-2423-49b6-ba3a-07720260cda3?store_url=https://car-learning.com", payload, headers)
            res = conn.getresponse()
            data = res.read()
            print(data.decode("utf-8"))
  /v1/public/start-integration/{company_id}:
    parameters:
      - in: path
        name: company_id
        required: true
        schema:
          type: string
        description: The Company ID to do integration with.
    get:
      security: []
      summary: WooCommerce Integraton
      description: This method is used for the server to start integration with the company and store url specified.
      tags:
        - Integration
      parameters:
        - in: query
          name: store_url
          required: true
          schema:
            type: string
          description: The Store URL
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/InternalServerErrorResponse'
